// <auto-generated />
using System;
using Hotel_NotFarOff.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hotel_NotFarOff.Migrations
{
    [DbContext(typeof(HotelNotFarOffContext))]
    [Migration("20230107131552_review")]
    partial class review
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BookingGuest", b =>
                {
                    b.Property<int>("GuestId")
                        .HasColumnType("int");

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.HasKey("GuestId", "BookingId");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingGuest", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("TenantFio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TenantFIO");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("RoomId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BookingStatus", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Passport")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Guest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Guest", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Raiting")
                        .HasColumnType("int");

                    b.Property<int>("RoomCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomCategoryId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<int>("RoomCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("RoomCategoryId");

                    b.ToTable("Room", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.RoomCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("MainImage")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<int>("NumbeOfSeats")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerDay")
                        .HasColumnType("money");

                    b.Property<int>("RoomCount")
                        .HasColumnType("int");

                    b.Property<double>("RoomSize")
                        .HasColumnType("float");

                    b.Property<string>("Services")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RoomCategory", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.RoomImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("image");

                    b.Property<int>("RoomCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomCategoryId");

                    b.ToTable("RoomImage", (string)null);
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.SiteProfle", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("EmployeeId")
                        .HasName("PK_AdministratorProfle");

                    b.ToTable("SiteProfle", (string)null);
                });

            modelBuilder.Entity("BookingGuest", b =>
                {
                    b.HasOne("Hotel_NotFarOff.Models.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingGuest_Booking");

                    b.HasOne("Hotel_NotFarOff.Models.Entities.Guest", null)
                        .WithMany()
                        .HasForeignKey("GuestId")
                        .IsRequired()
                        .HasConstraintName("FK_BookingGuest_Guest");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Booking", b =>
                {
                    b.HasOne("Hotel_NotFarOff.Models.Entities.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_BookingStatus");

                    b.HasOne("Hotel_NotFarOff.Models.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("RoomId")
                        .IsRequired()
                        .HasConstraintName("FK_Booking_Room");

                    b.Navigation("BookingStatus");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Employee", b =>
                {
                    b.HasOne("Hotel_NotFarOff.Models.Entities.Post", "Post")
                        .WithMany("Employees")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Post");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Review", b =>
                {
                    b.HasOne("Hotel_NotFarOff.Models.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Reviews")
                        .HasForeignKey("RoomCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Review_RoomCategory");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Room", b =>
                {
                    b.HasOne("Hotel_NotFarOff.Models.Entities.Employee", "Employee")
                        .WithMany("Rooms")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_Employee");

                    b.HasOne("Hotel_NotFarOff.Models.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Room_RoomCategory");

                    b.Navigation("Employee");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.RoomImage", b =>
                {
                    b.HasOne("Hotel_NotFarOff.Models.Entities.RoomCategory", "RoomCategory")
                        .WithMany("Galeries")
                        .HasForeignKey("RoomCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Galery_RoomCategory");

                    b.Navigation("RoomCategory");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.SiteProfle", b =>
                {
                    b.HasOne("Hotel_NotFarOff.Models.Entities.Employee", "Employee")
                        .WithOne("SiteProfle")
                        .HasForeignKey("Hotel_NotFarOff.Models.Entities.SiteProfle", "EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_SiteProfle_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Employee", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("SiteProfle");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Post", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("Hotel_NotFarOff.Models.Entities.RoomCategory", b =>
                {
                    b.Navigation("Galeries");

                    b.Navigation("Reviews");

                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
